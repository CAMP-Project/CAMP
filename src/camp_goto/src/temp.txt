// ROS Default Header File
#include <ros/ros.h>
#include <sensor_msgs/LaserScan.h>
#include <sensor_msgs/Imu.h>
#include <geometry_msgs/Twist.h>
//#include <localizer_dwm1001/Tag.h>

#include <vector>
using namespace std;

//constants from teleop_key
//const int BURGER_MAX_LIN_VEL = 0.22;
//const int BURGER_MAX_ANG_VEL = 2.84;

// somewhat safer constants because i am scared
const int BURGER_MAX_LIN_VEL = 0.1;
const int BURGER_MAX_ANG_VEL = 2.00;

// Declare Scan variables globaly
float angle_min, angle_max, angle_increment, scan_time, range_min, range_max;
float tagx, tagy, heading;
vector<float> ranges, intensities;

// This function runs if new info was published during a spin command.
// It collects any data from the Scan message
// void scanCallback(const sensor_msgs::LaserScan::ConstPtr& msg) {
//     angle_min = msg->angle_min;
//     angle_max = msg->angle_max;
//     angle_increment = msg->angle_increment;
//     scan_time = msg->scan_time;
//     range_min = msg->range_min;
//     range_max = msg->range_max;
//     ranges = msg->ranges;
//     intensities = msg->intensities;
// }
// void imuCallback(const sensor_msgs::Imu::ConstPtr& msg) {
//     heading = msg->orientation.z;
// }
// void tagCallback(const localizer_dwm1001::Tag::ConstPtr& msg) {
//     tagx = msg->x;
//     tagy = msg->y;
// }
// This is the main function.
// It contains some code to run once and a while loop for repeatign actions.
int main(int argc, char **argv){
    // Name the node
	ros::init(argc, argv, "brian");
	ros::NodeHandle nh;	

    // This is the message to send that contains motor instructions.
	// geometry_msgs::Twist vel_msg; 

    // Declare variables for vel_cmd message
    // float x_vel = 0, z_ang_vel = 0;
    // float closest_front_object;
    // int time = 0, left, right, lr;

	// Set the loop period. '10' refers to 10 Hz and the main loop repeats at 0.1 second intervals
	ros::Rate loop_rate(10);

	// scan_subscriber subscribes to the lidar's scan, cmd_publisher publishes a twist, and the size of the publisher queue is set to 10.
	// ros::Subscriber scan_subscriber = nh.subscribe("scan", 10, scanCallback);
    // ros::Subscriber imu_subscriber = nh.subscribe("imu", 10, imuCallback);
    // ros::Subscriber tag_subscriber = nh.subscribe("dwm1001/tag1", 10, tagCallback);
	// ros::Publisher cmd_publisher = nh.advertise<geometry_msgs::Twist>("cmd_vel", 10);
    	
	while(ros::ok()) {
        //publish vel_msg
        // ROS_INFO("heading: %f", heading);
        // ROS_INFO("x: %f Y:%f", tagx, tagy);

		//cmd_publisher.publish(vel_msg);
        // Sleep according to the loop rate above
		loop_rate.sleep();
        // Check for new messages from subscribed nodes
		ros::spinOnce();
        time++;
	}
	return 0;
}